# coding: utf-8

"""
    Gradient AI API

    Interface for interacting with Gradient AI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@gradient.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from gradientai.openapi.client.models.complete_model_error_one_of import CompleteModelErrorOneOf
from gradientai.openapi.client.models.complete_model_error_one_of1 import CompleteModelErrorOneOf1
from gradientai.openapi.client.models.complete_model_error_one_of10 import CompleteModelErrorOneOf10
from gradientai.openapi.client.models.complete_model_error_one_of2 import CompleteModelErrorOneOf2
from gradientai.openapi.client.models.complete_model_error_one_of3 import CompleteModelErrorOneOf3
from gradientai.openapi.client.models.complete_model_error_one_of4 import CompleteModelErrorOneOf4
from gradientai.openapi.client.models.complete_model_error_one_of5 import CompleteModelErrorOneOf5
from gradientai.openapi.client.models.complete_model_error_one_of6 import CompleteModelErrorOneOf6
from gradientai.openapi.client.models.complete_model_error_one_of7 import CompleteModelErrorOneOf7
from gradientai.openapi.client.models.complete_model_error_one_of8 import CompleteModelErrorOneOf8
from gradientai.openapi.client.models.complete_model_error_one_of9 import CompleteModelErrorOneOf9
from typing import Any, List
from pydantic import StrictStr, Field

COMPLETEMODELERROR_ONE_OF_SCHEMAS = ["CompleteModelErrorOneOf", "CompleteModelErrorOneOf1", "CompleteModelErrorOneOf10", "CompleteModelErrorOneOf2", "CompleteModelErrorOneOf3", "CompleteModelErrorOneOf4", "CompleteModelErrorOneOf5", "CompleteModelErrorOneOf6", "CompleteModelErrorOneOf7", "CompleteModelErrorOneOf8", "CompleteModelErrorOneOf9"]

class CompleteModelError(BaseModel):
    """
    CompleteModelError
    """
    # data type: CompleteModelErrorOneOf
    oneof_schema_1_validator: Optional[CompleteModelErrorOneOf] = None
    # data type: CompleteModelErrorOneOf1
    oneof_schema_2_validator: Optional[CompleteModelErrorOneOf1] = None
    # data type: CompleteModelErrorOneOf2
    oneof_schema_3_validator: Optional[CompleteModelErrorOneOf2] = None
    # data type: CompleteModelErrorOneOf3
    oneof_schema_4_validator: Optional[CompleteModelErrorOneOf3] = None
    # data type: CompleteModelErrorOneOf4
    oneof_schema_5_validator: Optional[CompleteModelErrorOneOf4] = None
    # data type: CompleteModelErrorOneOf5
    oneof_schema_6_validator: Optional[CompleteModelErrorOneOf5] = None
    # data type: CompleteModelErrorOneOf6
    oneof_schema_7_validator: Optional[CompleteModelErrorOneOf6] = None
    # data type: CompleteModelErrorOneOf7
    oneof_schema_8_validator: Optional[CompleteModelErrorOneOf7] = None
    # data type: CompleteModelErrorOneOf8
    oneof_schema_9_validator: Optional[CompleteModelErrorOneOf8] = None
    # data type: CompleteModelErrorOneOf9
    oneof_schema_10_validator: Optional[CompleteModelErrorOneOf9] = None
    # data type: CompleteModelErrorOneOf10
    oneof_schema_11_validator: Optional[CompleteModelErrorOneOf10] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(COMPLETEMODELERROR_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CompleteModelError.construct()
        error_messages = []
        match = 0
        # validate data type: CompleteModelErrorOneOf
        if not isinstance(v, CompleteModelErrorOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf1
        if not isinstance(v, CompleteModelErrorOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf1`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf2
        if not isinstance(v, CompleteModelErrorOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf2`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf3
        if not isinstance(v, CompleteModelErrorOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf3`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf4
        if not isinstance(v, CompleteModelErrorOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf4`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf5
        if not isinstance(v, CompleteModelErrorOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf5`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf6
        if not isinstance(v, CompleteModelErrorOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf6`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf7
        if not isinstance(v, CompleteModelErrorOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf7`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf8
        if not isinstance(v, CompleteModelErrorOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf8`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf9
        if not isinstance(v, CompleteModelErrorOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf9`")
        else:
            match += 1
        # validate data type: CompleteModelErrorOneOf10
        if not isinstance(v, CompleteModelErrorOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CompleteModelErrorOneOf10`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CompleteModelError with oneOf schemas: CompleteModelErrorOneOf, CompleteModelErrorOneOf1, CompleteModelErrorOneOf10, CompleteModelErrorOneOf2, CompleteModelErrorOneOf3, CompleteModelErrorOneOf4, CompleteModelErrorOneOf5, CompleteModelErrorOneOf6, CompleteModelErrorOneOf7, CompleteModelErrorOneOf8, CompleteModelErrorOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CompleteModelError with oneOf schemas: CompleteModelErrorOneOf, CompleteModelErrorOneOf1, CompleteModelErrorOneOf10, CompleteModelErrorOneOf2, CompleteModelErrorOneOf3, CompleteModelErrorOneOf4, CompleteModelErrorOneOf5, CompleteModelErrorOneOf6, CompleteModelErrorOneOf7, CompleteModelErrorOneOf8, CompleteModelErrorOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> CompleteModelError:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> CompleteModelError:
        """Returns the object represented by the json string"""
        instance = CompleteModelError.construct()
        error_messages = []
        match = 0

        # deserialize data into CompleteModelErrorOneOf
        try:
            instance.actual_instance = CompleteModelErrorOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf1
        try:
            instance.actual_instance = CompleteModelErrorOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf2
        try:
            instance.actual_instance = CompleteModelErrorOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf3
        try:
            instance.actual_instance = CompleteModelErrorOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf4
        try:
            instance.actual_instance = CompleteModelErrorOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf5
        try:
            instance.actual_instance = CompleteModelErrorOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf6
        try:
            instance.actual_instance = CompleteModelErrorOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf7
        try:
            instance.actual_instance = CompleteModelErrorOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf8
        try:
            instance.actual_instance = CompleteModelErrorOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf9
        try:
            instance.actual_instance = CompleteModelErrorOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CompleteModelErrorOneOf10
        try:
            instance.actual_instance = CompleteModelErrorOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CompleteModelError with oneOf schemas: CompleteModelErrorOneOf, CompleteModelErrorOneOf1, CompleteModelErrorOneOf10, CompleteModelErrorOneOf2, CompleteModelErrorOneOf3, CompleteModelErrorOneOf4, CompleteModelErrorOneOf5, CompleteModelErrorOneOf6, CompleteModelErrorOneOf7, CompleteModelErrorOneOf8, CompleteModelErrorOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CompleteModelError with oneOf schemas: CompleteModelErrorOneOf, CompleteModelErrorOneOf1, CompleteModelErrorOneOf10, CompleteModelErrorOneOf2, CompleteModelErrorOneOf3, CompleteModelErrorOneOf4, CompleteModelErrorOneOf5, CompleteModelErrorOneOf6, CompleteModelErrorOneOf7, CompleteModelErrorOneOf8, CompleteModelErrorOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        elif isinstance(self.actual_instance, list):
            result = []
            for element in self.actual_instance:
                element_to_dict = getattr(element, "to_dict", None)
                result.append(
                    element.to_dict()
                    if callable(element_to_dict)
                    else element
                )

            return result
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

