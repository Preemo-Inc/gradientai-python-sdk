# coding: utf-8

"""
    Gradient AI API

    Interface for interacting with Gradient AI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@gradient.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, conint, validator

class SentenceWithContextChunker(BaseModel):
    """
    SentenceWithContextChunker
    """
    chunker_type: StrictStr = Field(..., alias="chunkerType")
    context_sentences: Optional[conint(strict=True, gt=0)] = Field(None, alias="contextSentences")
    overlap: Optional[conint(strict=True, ge=0)] = None
    size: Optional[conint(strict=True, gt=0)] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["chunkerType", "contextSentences", "overlap", "size"]

    @validator('chunker_type')
    def chunker_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('sentenceWithContextChunker'):
            raise ValueError("must be one of enum values ('sentenceWithContextChunker')")
        return value

    class Config:
        """pydantic.v1 configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SentenceWithContextChunker:
        """Create an instance of SentenceWithContextChunker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if context_sentences (nullable) is None
        # and __fields_set__ contains the field
        if self.context_sentences is None and "context_sentences" in self.__fields_set__:
            _dict['contextSentences'] = None

        # set to None if overlap (nullable) is None
        # and __fields_set__ contains the field
        if self.overlap is None and "overlap" in self.__fields_set__:
            _dict['overlap'] = None

        # set to None if size (nullable) is None
        # and __fields_set__ contains the field
        if self.size is None and "size" in self.__fields_set__:
            _dict['size'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SentenceWithContextChunker:
        """Create an instance of SentenceWithContextChunker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SentenceWithContextChunker.parse_obj(obj)

        _obj = SentenceWithContextChunker.parse_obj({
            "chunker_type": obj.get("chunkerType"),
            "context_sentences": obj.get("contextSentences"),
            "overlap": obj.get("overlap"),
            "size": obj.get("size")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

