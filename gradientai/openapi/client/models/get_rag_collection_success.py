# coding: utf-8

"""
    Gradient AI API

    Interface for interacting with Gradient AI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@gradient.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from gradientai.openapi.client.models.get_rag_collection_success_files_inner import GetRagCollectionSuccessFilesInner
from gradientai.openapi.client.models.list_rag_collections_success_rag_collections_inner_parser import ListRagCollectionsSuccessRagCollectionsInnerParser

class GetRagCollectionSuccess(BaseModel):
    """
    GetRagCollectionSuccess
    """
    creation_time: datetime = Field(..., alias="creationTime")
    files: conlist(GetRagCollectionSuccessFilesInner) = Field(...)
    id: constr(strict=True, min_length=1) = Field(...)
    latest_update_time: datetime = Field(..., alias="latestUpdateTime")
    name: constr(strict=True, min_length=1) = Field(...)
    parser: ListRagCollectionsSuccessRagCollectionsInnerParser = Field(...)
    slug: StrictStr = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["creationTime", "files", "id", "latestUpdateTime", "name", "parser", "slug"]

    @validator('slug')
    def slug_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('bge-large'):
            raise ValueError("must be one of enum values ('bge-large')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetRagCollectionSuccess:
        """Create an instance of GetRagCollectionSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of parser
        if self.parser:
            _dict['parser'] = self.parser.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetRagCollectionSuccess:
        """Create an instance of GetRagCollectionSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetRagCollectionSuccess.parse_obj(obj)

        _obj = GetRagCollectionSuccess.parse_obj({
            "creation_time": obj.get("creationTime"),
            "files": [GetRagCollectionSuccessFilesInner.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
            "id": obj.get("id"),
            "latest_update_time": obj.get("latestUpdateTime"),
            "name": obj.get("name"),
            "parser": ListRagCollectionsSuccessRagCollectionsInnerParser.from_dict(obj.get("parser")) if obj.get("parser") is not None else None,
            "slug": obj.get("slug")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

