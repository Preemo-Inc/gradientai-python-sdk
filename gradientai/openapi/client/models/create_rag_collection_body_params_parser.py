# coding: utf-8

"""
    Gradient AI API

    Interface for interacting with Gradient AI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@gradient.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, ValidationError, validator
from gradientai.openapi.client.models.sentence_window_node_parser import SentenceWindowNodeParser
from gradientai.openapi.client.models.simple_node_parser import SimpleNodeParser
from typing import Any, List
from pydantic.v1 import StrictStr, Field

CREATERAGCOLLECTIONBODYPARAMSPARSER_ONE_OF_SCHEMAS = ["SentenceWindowNodeParser", "SimpleNodeParser"]

class CreateRagCollectionBodyParamsParser(BaseModel):
    """
    CreateRagCollectionBodyParamsParser
    """
    # data type: SimpleNodeParser
    oneof_schema_1_validator: Optional[SimpleNodeParser] = None
    # data type: SentenceWindowNodeParser
    oneof_schema_2_validator: Optional[SentenceWindowNodeParser] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(CREATERAGCOLLECTIONBODYPARAMSPARSER_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        if v is None:
            return v

        instance = CreateRagCollectionBodyParamsParser.construct()
        error_messages = []
        match = 0
        # validate data type: SimpleNodeParser
        if not isinstance(v, SimpleNodeParser):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SimpleNodeParser`")
        else:
            match += 1
        # validate data type: SentenceWindowNodeParser
        if not isinstance(v, SentenceWindowNodeParser):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SentenceWindowNodeParser`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateRagCollectionBodyParamsParser with oneOf schemas: SentenceWindowNodeParser, SimpleNodeParser. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateRagCollectionBodyParamsParser with oneOf schemas: SentenceWindowNodeParser, SimpleNodeParser. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> CreateRagCollectionBodyParamsParser:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> CreateRagCollectionBodyParamsParser:
        """Returns the object represented by the json string"""
        instance = CreateRagCollectionBodyParamsParser.construct()
        if json_str is None:
            return instance

        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("parserType")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `parserType` in the input.")

        # check if data type is `SentenceWindowNodeParser`
        if _data_type == "sentenceWindowNodeParser":
            instance.actual_instance = SentenceWindowNodeParser.from_json(json_str)
            return instance

        # check if data type is `SimpleNodeParser`
        if _data_type == "simpleNodeParser":
            instance.actual_instance = SimpleNodeParser.from_json(json_str)
            return instance

        # deserialize data into SimpleNodeParser
        try:
            instance.actual_instance = SimpleNodeParser.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SentenceWindowNodeParser
        try:
            instance.actual_instance = SentenceWindowNodeParser.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateRagCollectionBodyParamsParser with oneOf schemas: SentenceWindowNodeParser, SimpleNodeParser. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateRagCollectionBodyParamsParser with oneOf schemas: SentenceWindowNodeParser, SimpleNodeParser. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        elif isinstance(self.actual_instance, list):
            result = []
            for element in self.actual_instance:
                element_to_dict = getattr(element, "to_dict", None)
                result.append(
                    element.to_dict()
                    if callable(element_to_dict)
                    else element
                )

            return result
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

